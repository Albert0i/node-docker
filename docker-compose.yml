version: "3"
services:
  nginx:
    image: nginx:stable-alpine
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
    depends_on:
    - node-app

  node-app:
    image: albert0i/node-app
    environment:
      - PORT=3000
    depends_on:
      - mongo
      - redis

  mongo:
    image: mongo:4.4
    environment:
      - MONGO_INITDB_ROOT_USERNAME=root
      - MONGO_INITDB_ROOT_PASSWORD=root
    volumes:
      - ./data/db:/data/db
  
  redis:
    image: redis:6.2.6

# 
# docker-compose -f docker-compose.yml -f docker-compose.dev.yml up -d 
# docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d 
# docker-compose -f docker-compose.yml -f docker-compose.dev.yml up -d --build -V
# docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d --build
# docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d --build --no-deps node-app
# docker-compose --verbose -f docker-compose.yml -f docker-compose.prod.yml up -d
# docker-compose --verbose --log-level=DEBUG -f docker-compose.yml -f docker-compose.prod.yml up -d
# 
#2 docker-compose -f docker-compose.yml -f docker-compose.dev.yml up -d --scale node-app=2
# docker-compose -f docker-compose.yml -f docker-compose.dev.yml config > dev.yml
#
# docker-compose -f docker-compose.yml -f docker-compose.dev.yml up -d --no-deps node-app
# docker-compose -f docker-compose.yml -f docker-compose.dev.yml up -d mongo
#
# docker-compose logs node-app 
# docker-compose exec node-app printenv
# docker-compose exec mongo mongo -u root -p root 
# db.books.insert({"name": "Harry Potter"});
#
# docker-compose -f docker-compose.yml -f docker-compose.dev.yml down -v
# docker-compose -f docker-compose.yml -f docker-compose.prod.yml down -v
#
# 
#
#
